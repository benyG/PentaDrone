function Test-UserCredential {
    [CmdletBinding(DefaultParameterSetName = "set1")]
    [OutputType("set1", [System.Boolean])]
    [OutputType("PSCredential", [System.Boolean])]
    param(
        [Parameter(Mandatory=$true, ParameterSetName="set1", position=0)]
        [ValidateNotNullOrEmpty()]
        [String] $Username,
 
        [Parameter(Mandatory=$true, ParameterSetName="set1", position=1)]
        [ValidateNotNullOrEmpty()]
        [System.Security.SecureString] $Password,
         
        [Parameter(Mandatory=$true, ParameterSetName="PSCredential", ValueFromPipeline=$true, position=0)]
        [ValidateNotNullOrEmpty()]
        [Management.Automation.PSCredential] $Credential,
         
        [Parameter(position=2)]
        [Switch] $Domain,
         
        [Parameter(position=3)]
        [Switch] $UseKerberos
    )
     
    Begin {
        try { 
            $assemType = 'System.DirectoryServices.AccountManagement'
            $assem = [reflection.assembly]::LoadWithPartialName($assemType) }
        catch { throw 'Failed to load assembly "System.DirectoryServices.AccountManagement". The error was: "{0}".' -f $_ }
         
        $system = Get-WmiObject -Class Win32_ComputerSystem
         
        if (0, 2 -contains $system.DomainRole -and $Domain) {
            throw 'This computer is not a member of a domain.'
        }
    }
     
    Process {
        try {
            switch ($PSCmdlet.ParameterSetName) {
                'PSCredential' {
                    if ($Domain) {
                        $Username = $Credential.UserName.TrimStart('\')
                    } else {
                        $Username = $Credential.GetNetworkCredential().UserName
                    }
                    $PasswordText = $Credential.GetNetworkCredential().Password
                }
                'set1' {
                        # Decrypt secure string.
                    $PasswordText = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
                            [Runtime.InteropServices.Marshal]::SecureStringToBSTR($Password)
                        )
                }
            }
                     
            if ($Domain) {
                $pc = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext 'Domain', $system.Domain
            } else {
                $pc = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext 'Machine', $env:COMPUTERNAME
            }
             
            if ($Domain -and $UseKerberos) {
                return $pc.ValidateCredentials($Username, $PasswordText)
            } else {
                return $pc.ValidateCredentials($Username, $PasswordText, [DirectoryServices.AccountManagement.ContextOptions]::Negotiate)
            }
        } catch {
            throw 'Failed to test user credentials. The error was: "{0}".' -f $_
        } finally {
            Remove-Variable -Name Username -ErrorAction SilentlyContinue
            Remove-Variable -Name Password -ErrorAction SilentlyContinue
        }
    }
     
}